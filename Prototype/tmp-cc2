Сравнение файлов zepto1-2 и ZEPTO2-2
***** zepto1-2
#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
***** ZEPTO2-2
#include <iostream>
#include <cstdlib>
*****

***** zepto1-2
#include <cstdio>
#include <string>
#include <cstring>
#include <cassert>
#include <utility>
#include <iomanip>

***** ZEPTO2-2
#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>


*****

***** zepto1-2

const int mod = 1e9 + 7;
const int p = 31;
const int MAXN = 6 * 105000; 

***** ZEPTO2-2

const int N = (int)6e5 + 100;

const int mod = (int)1e9 + 7;

*****

***** zepto1-2
int n, m;

set < pair <long long, long long> > st[MAXN];
long long pp1[MAXN], pp2[MAXN];
char s[MAXN];

***** ZEPTO2-2
int n, m;
const int p = 3;
set<long long> H;
set<long long> Hmod;
char a[] = {'a', 'b', 'c'};
long long p3[N];
long long p3mod[N];
string s;

*****

***** zepto1-2
int main() {
        //assert(freopen("input.txt","r",stdin));
        //assert(freopen("output.txt","w",stdout));

        scanf("%d %d\n", &n, &m);

        pp1[0] = 1; pp2[0] = 1;
    for (int i = 1; i < MAXN; i++) {
        pp1[i] = pp1[i - 1] * p;
        pp2[i] = (pp2[i - 1] * p) % mod; 
    }

        for (int i = 1; i <= n; i++) {
                gets(s);
                int len = strlen(s);

                long long h1 = s[0] - 'a' + 1;
                long long h2 = s[0] - 'a' + 1;
                for (int i = 1; i < len; i++) {
                 h1 = h1 + pp1[i] * (s[i] - 'a' + 1);
                 h2 = (h2 + pp2[i] * (s[i] - 'a' + 1)) % mod; 
        }

        st[len].insert( make_pair(h1, h2) );
        }

        
        for (int i = 1; i <= m; i++) {
                bool res = false;

                gets(s);
                int len = strlen(s);

                long long h1 = s[0] - 'a' + 1;
                long long h2 = s[0] - 'a' + 1;
                for (int i = 1; i < len; i++) {
                 h1 = h1 + pp1[i] * (s[i] - 'a' + 1);
                 h2 = (h2 + pp2[i] * (s[i] - 'a' + 1)) % mod; 
        }

        for (int i = 0; i < len && !res; i++) {
                for (char c = 'a'; c <= 'c'; c++) {
                        if (s[i] == c)
                                continue;
                                long long ht1, ht2;
                                ht1 = h1 - (s[i] - 'a' + 1) * pp1[i];
                                ht1 += (c - 'a' + 1) * pp1[i];


                                ht2 = (h2 - (s[i] - 'a' + 1) * pp2[i] + mod) % mod;
                                while (ht2 < 0)
                                        ht2 += mod;
                                ht2 = (ht2 + (c - 'a' + 1) * pp2[i]) % mod;

                                if (st[len].count(make_pair(ht1, ht2))) {
                                        res = true;
                                        break;
                                }
                }
***** ZEPTO2-2
int main() {
        p3[0] = 1;
        p3mod[0] = 1;
        for (int i = 1 ; i < N ; i ++) {
                p3[i] = p3[i-1] * 3;
                p3mod[i] = (p3mod[i-1] * 3ll)%mod;
        }
    scanf("%d%d ", &n, &m);
    for (int i = 0 ; i < n ; i ++) {
        getline(cin, s);
        long long h = 0;
        long long hm = 0;
        for (int j = 0 ; j < s.length() ; j ++) {
                h = h * p + s[j] - 'a';
                hm = (1ll * hm * p + s[j] - 'a') % mod;
        }
        H.insert(h);
        Hmod.insert(hm);
    }
    for (int i = 0 ; i < m ; i ++) {
        getline(cin, s);
        long long h = 0;
        long long hm = 0;
        for (int j = 0 ; j < s.length() ; j ++) {
                h = h * p + s[j] - 'a';
                hm = (1ll * hm * p + s[j] - 'a') % mod;
        }
        int l = s.length();
        bool found = 0;
        for (int j = 0 ; j < l && !found; j++) {
                for (int k = 0 ; k < 3; k ++) {
                        if (a[k] == s[j]) continue;
                        long long nh = h - (s[j] - 'a') * p3[l-j-1] + (a[k] - 'a') * p3[l-j-1];
                        long long nhm = (hm - 1ll * (s[j] - 'a') * p3mod[l-j-1] + 1ll * (a[k] - 'a') * p3mod[l-j-1])%mod;
                        nhm = (nhm + mod)%mod;
                        if (H.count(nh) > 0 && Hmod.count(nhm) > 0) {
                                found = 1;
                                break;
                        }
                }
*****

***** zepto1-2
        }

        if (res)
                puts("YES");
                else
                        puts("NO");
        }

        return 0;
}
***** ZEPTO2-2
        }
        if (found) {
                puts("YES");
        } else {
                puts("NO");
        }
    }
    
    
    return 0;
}
*****

